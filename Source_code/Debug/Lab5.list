
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003564  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036fc  080036fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036fc  080036fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036fc  080036fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08003774  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003774  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6f9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee5  00000000  00000000  0002e792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00030678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022d6  00000000  00000000  00031ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcdd  00000000  00000000  00034176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c11  00000000  00000000  00041e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000caa64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a8  00000000  00000000  000caab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003658 	.word	0x08003658

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003658 	.word	0x08003658

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <redToggle>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void redToggle(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 8000160:	2108      	movs	r1, #8
 8000162:	4802      	ldr	r0, [pc, #8]	; (800016c <redToggle+0x10>)
 8000164:	f000 ffc8 	bl	80010f8 <HAL_GPIO_TogglePin>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40010800 	.word	0x40010800

08000170 <yellowToggle>:
void yellowToggle(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(yellow_led_GPIO_Port, yellow_led_Pin);
 8000174:	2110      	movs	r1, #16
 8000176:	4802      	ldr	r0, [pc, #8]	; (8000180 <yellowToggle+0x10>)
 8000178:	f000 ffbe 	bl	80010f8 <HAL_GPIO_TogglePin>
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <greenToggle>:
void greenToggle(){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 8000188:	2120      	movs	r1, #32
 800018a:	4802      	ldr	r0, [pc, #8]	; (8000194 <greenToggle+0x10>)
 800018c:	f000 ffb4 	bl	80010f8 <HAL_GPIO_TogglePin>
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010800 	.word	0x40010800

08000198 <blueToggle>:
void blueToggle(){
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(blue_led_GPIO_Port, blue_led_Pin);
 800019c:	2140      	movs	r1, #64	; 0x40
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <blueToggle+0x10>)
 80001a0:	f000 ffaa 	bl	80010f8 <HAL_GPIO_TogglePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <whiteToggle>:
void whiteToggle(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(white_led_GPIO_Port, white_led_Pin);
 80001b0:	2180      	movs	r1, #128	; 0x80
 80001b2:	4802      	ldr	r0, [pc, #8]	; (80001bc <whiteToggle+0x10>)
 80001b4:	f000 ffa0 	bl	80010f8 <HAL_GPIO_TogglePin>
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010800 	.word	0x40010800

080001c0 <sendSignal>:
void sendSignal(char *str){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(void *) str, strlen(str), 10);
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f7ff ffbf 	bl	800014c <strlen>
 80001ce:	4603      	mov	r3, r0
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	230a      	movs	r3, #10
 80001d4:	6879      	ldr	r1, [r7, #4]
 80001d6:	4803      	ldr	r0, [pc, #12]	; (80001e4 <sendSignal+0x24>)
 80001d8:	f001 ffee 	bl	80021b8 <HAL_UART_Transmit>
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	200000a0 	.word	0x200000a0

080001e8 <main>:
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 fbd0 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f832 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f4:	f000 f8e2 	bl	80003bc <MX_GPIO_Init>
  MX_TIM2_Init();
 80001f8:	f000 f86a 	bl	80002d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001fc:	f000 f8b4 	bl	8000368 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000200:	480f      	ldr	r0, [pc, #60]	; (8000240 <main+0x58>)
 8000202:	f001 fbf1 	bl	80019e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Add_Task(redToggle, 50, 50);
 8000206:	2232      	movs	r2, #50	; 0x32
 8000208:	2132      	movs	r1, #50	; 0x32
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <main+0x5c>)
 800020c:	f000 f984 	bl	8000518 <SCH_Add_Task>
	SCH_Add_Task(yellowToggle, 101, 100);
 8000210:	2264      	movs	r2, #100	; 0x64
 8000212:	2165      	movs	r1, #101	; 0x65
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <main+0x60>)
 8000216:	f000 f97f 	bl	8000518 <SCH_Add_Task>
	SCH_Add_Task(greenToggle, 152, 150);
 800021a:	2296      	movs	r2, #150	; 0x96
 800021c:	2198      	movs	r1, #152	; 0x98
 800021e:	480b      	ldr	r0, [pc, #44]	; (800024c <main+0x64>)
 8000220:	f000 f97a 	bl	8000518 <SCH_Add_Task>
	SCH_Add_Task(blueToggle, 203, 200);
 8000224:	22c8      	movs	r2, #200	; 0xc8
 8000226:	21cb      	movs	r1, #203	; 0xcb
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x68>)
 800022a:	f000 f975 	bl	8000518 <SCH_Add_Task>
	SCH_Add_Task(whiteToggle, 254, 250);
 800022e:	22fa      	movs	r2, #250	; 0xfa
 8000230:	21fe      	movs	r1, #254	; 0xfe
 8000232:	4808      	ldr	r0, [pc, #32]	; (8000254 <main+0x6c>)
 8000234:	f000 f970 	bl	8000518 <SCH_Add_Task>

  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000238:	f000 fa06 	bl	8000648 <SCH_Dispatch_Tasks>
 800023c:	e7fc      	b.n	8000238 <main+0x50>
 800023e:	bf00      	nop
 8000240:	200000e8 	.word	0x200000e8
 8000244:	0800015d 	.word	0x0800015d
 8000248:	08000171 	.word	0x08000171
 800024c:	08000185 	.word	0x08000185
 8000250:	08000199 	.word	0x08000199
 8000254:	080001ad 	.word	0x080001ad

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fdb4 	bl	8002dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f000 ff4c 	bl	800112c <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f8cb 	bl	8000434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 f9b8 	bl	800162c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f8b7 	bl	8000434 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_TIM2_Init+0x94>)
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_TIM2_Init+0x94>)
 80002f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80002fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <MX_TIM2_Init+0x94>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000302:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_TIM2_Init+0x94>)
 8000304:	220a      	movs	r2, #10
 8000306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <MX_TIM2_Init+0x94>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_TIM2_Init+0x94>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000314:	4813      	ldr	r0, [pc, #76]	; (8000364 <MX_TIM2_Init+0x94>)
 8000316:	f001 fb17 	bl	8001948 <HAL_TIM_Base_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000320:	f000 f888 	bl	8000434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4619      	mov	r1, r3
 8000330:	480c      	ldr	r0, [pc, #48]	; (8000364 <MX_TIM2_Init+0x94>)
 8000332:	f001 fcad 	bl	8001c90 <HAL_TIM_ConfigClockSource>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800033c:	f000 f87a 	bl	8000434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000348:	463b      	mov	r3, r7
 800034a:	4619      	mov	r1, r3
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_TIM2_Init+0x94>)
 800034e:	f001 fe79 	bl	8002044 <HAL_TIMEx_MasterConfigSynchronization>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000358:	f000 f86c 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000e8 	.word	0x200000e8

08000368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <MX_USART1_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f001 feba 	bl	8002118 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f843 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000a0 	.word	0x200000a0
 80003b8:	40013800 	.word	0x40013800

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_GPIO_Init+0x5c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a10      	ldr	r2, [pc, #64]	; (8000418 <MX_GPIO_Init+0x5c>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_GPIO_Init+0x5c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_led_Pin|yellow_led_Pin|green_led_Pin|blue_led_Pin
 80003e8:	2200      	movs	r2, #0
 80003ea:	21f8      	movs	r1, #248	; 0xf8
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <MX_GPIO_Init+0x60>)
 80003ee:	f000 fe6b 	bl	80010c8 <HAL_GPIO_WritePin>
                          |white_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red_led_Pin yellow_led_Pin green_led_Pin blue_led_Pin
                           white_led_Pin */
  GPIO_InitStruct.Pin = red_led_Pin|yellow_led_Pin|green_led_Pin|blue_led_Pin
 80003f2:	23f8      	movs	r3, #248	; 0xf8
 80003f4:	60bb      	str	r3, [r7, #8]
                          |white_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2302      	movs	r3, #2
 8000400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	4619      	mov	r1, r3
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_GPIO_Init+0x60>)
 800040a:	f000 fce3 	bl	8000dd4 <HAL_GPIO_Init>

}
 800040e:	bf00      	nop
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800

08000420 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000428:	f000 f94c 	bl	80006c4 <SCH_Update>
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <addTask>:





int addTask(worker_t* task){
 8000440:	b480      	push	{r7}
 8000442:	b087      	sub	sp, #28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	if (company.number >= SCH_MAX_TASKS){
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <addTask+0xd4>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b1f      	cmp	r3, #31
 800044e:	dd01      	ble.n	8000454 <addTask+0x14>
		return 0 ;
 8000450:	2300      	movs	r3, #0
 8000452:	e05a      	b.n	800050a <addTask+0xca>
		//company is full
	}
	if (company.number == 0){ // company is empty
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <addTask+0xd4>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d109      	bne.n	8000470 <addTask+0x30>
		company.head = task;
 800045c:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <addTask+0xd4>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6013      	str	r3, [r2, #0]
		company.number ++;
 8000462:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <addTask+0xd4>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	3301      	adds	r3, #1
 8000468:	4a2a      	ldr	r2, [pc, #168]	; (8000514 <addTask+0xd4>)
 800046a:	6053      	str	r3, [r2, #4]
		return 0;
 800046c:	2300      	movs	r3, #0
 800046e:	e04c      	b.n	800050a <addTask+0xca>
	}

	worker_t *current = company.head;
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <addTask+0xd4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	617b      	str	r3, [r7, #20]
	worker_t *prev = NULL;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
	int delay_tmp = task->Delay - current->Delay;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	60fb      	str	r3, [r7, #12]
	while (delay_tmp >= 0 && current != NULL){
 8000486:	e00f      	b.n	80004a8 <addTask+0x68>
		task->Delay = delay_tmp;
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	609a      	str	r2, [r3, #8]
		prev = current;
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	613b      	str	r3, [r7, #16]
		current = current->nextTask;
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	691b      	ldr	r3, [r3, #16]
 8000496:	617b      	str	r3, [r7, #20]
		if (current != NULL) delay_tmp -= current->Delay;
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d004      	beq.n	80004a8 <addTask+0x68>
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	60fb      	str	r3, [r7, #12]
	while (delay_tmp >= 0 && current != NULL){
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	db02      	blt.n	80004b4 <addTask+0x74>
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d1e9      	bne.n	8000488 <addTask+0x48>
	}

	if (prev == NULL){ // insert at head
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d10d      	bne.n	80004d6 <addTask+0x96>
		task->nextTask = current;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	611a      	str	r2, [r3, #16]
		current->Delay -= task->Delay;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	689a      	ldr	r2, [r3, #8]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	1ad2      	subs	r2, r2, r3
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	609a      	str	r2, [r3, #8]
		company.head = task;
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <addTask+0xd4>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	e013      	b.n	80004fe <addTask+0xbe>
	}
	else if (current == NULL){ // insert at tail
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d103      	bne.n	80004e4 <addTask+0xa4>
		prev->nextTask = task;
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	e00c      	b.n	80004fe <addTask+0xbe>
	}
	else{ // insert at middle
		prev->nextTask = task;
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	611a      	str	r2, [r3, #16]
		task->nextTask = current;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	611a      	str	r2, [r3, #16]
		current->Delay -= task->Delay;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	1ad2      	subs	r2, r2, r3
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	609a      	str	r2, [r3, #8]
	}

	company.number++;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <addTask+0xd4>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <addTask+0xd4>)
 8000506:	6053      	str	r3, [r2, #4]
	return 0;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000130 	.word	0x20000130

08000518 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
	worker_t * task = (worker_t *)malloc(sizeof(worker_t));
 8000524:	2014      	movs	r0, #20
 8000526:	f002 fc45 	bl	8002db4 <malloc>
 800052a:	4603      	mov	r3, r0
 800052c:	617b      	str	r3, [r7, #20]
	task->taskPointer = pFunction;
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	601a      	str	r2, [r3, #0]
	task->taskID = taskid++;
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <SCH_Add_Task+0x4c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1c5a      	adds	r2, r3, #1
 800053a:	490a      	ldr	r1, [pc, #40]	; (8000564 <SCH_Add_Task+0x4c>)
 800053c:	600a      	str	r2, [r1, #0]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	6053      	str	r3, [r2, #4]
	task->Delay = DELAY;
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	609a      	str	r2, [r3, #8]
	task->Period = PERIOD;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	60da      	str	r2, [r3, #12]
	task->nextTask = NULL;
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]

	addTask(task);
 8000554:	6978      	ldr	r0, [r7, #20]
 8000556:	f7ff ff73 	bl	8000440 <addTask>
	return 0;
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000090 	.word	0x20000090

08000568 <deleteTask>:
int deleteTask(uint32_t taskID){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if (company.number == 0) return 0;
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <deleteTask+0xc4>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d101      	bne.n	800057c <deleteTask+0x14>
 8000578:	2300      	movs	r3, #0
 800057a:	e053      	b.n	8000624 <deleteTask+0xbc>
	worker_t *current = company.head;
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <deleteTask+0xc4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	60fb      	str	r3, [r7, #12]
	worker_t *prev = NULL;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]

	while (current->taskID != taskID && current != NULL){
 8000586:	e004      	b.n	8000592 <deleteTask+0x2a>
		prev = current;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	60bb      	str	r3, [r7, #8]
		current = current->nextTask;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	691b      	ldr	r3, [r3, #16]
 8000590:	60fb      	str	r3, [r7, #12]
	while (current->taskID != taskID && current != NULL){
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	d002      	beq.n	80005a2 <deleteTask+0x3a>
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f2      	bne.n	8000588 <deleteTask+0x20>
	}
	// now current is at node with the same ID

	if (current == NULL) return 0; // can't find task
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <deleteTask+0x44>
 80005a8:	2300      	movs	r3, #0
 80005aa:	e03b      	b.n	8000624 <deleteTask+0xbc>
	if (prev == NULL) { //delete head
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d114      	bne.n	80005dc <deleteTask+0x74>
		company.head= current->nextTask;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	4a1d      	ldr	r2, [pc, #116]	; (800062c <deleteTask+0xc4>)
 80005b8:	6013      	str	r3, [r2, #0]
		free(current);
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f002 fc02 	bl	8002dc4 <free>
		if (current->nextTask != NULL){
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d027      	beq.n	8000618 <deleteTask+0xb0>
			current->nextTask->Delay += current->Delay;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	6899      	ldr	r1, [r3, #8]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	440a      	add	r2, r1
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	e01d      	b.n	8000618 <deleteTask+0xb0>
		}
	}
	else if (current->nextTask == NULL) //delete tail
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d106      	bne.n	80005f2 <deleteTask+0x8a>
	{
		free(current);
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f002 fbed 	bl	8002dc4 <free>
		prev->nextTask = NULL;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	e012      	b.n	8000618 <deleteTask+0xb0>
	}
	else{ // delete middle
		prev->nextTask = current->nextTask;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	691a      	ldr	r2, [r3, #16]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	611a      	str	r2, [r3, #16]
		current->nextTask->Delay += current->Delay;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	440a      	add	r2, r1
 800060a:	609a      	str	r2, [r3, #8]
		current->nextTask = NULL;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
		free(current);
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f002 fbd6 	bl	8002dc4 <free>
	}
	company.number --;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <deleteTask+0xc4>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a03      	ldr	r2, [pc, #12]	; (800062c <deleteTask+0xc4>)
 8000620:	6053      	str	r3, [r2, #4]


	return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000130 	.word	0x20000130

08000630 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	deleteTask(taskID);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ff95 	bl	8000568 <deleteTask>
	return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	while (company.head->Delay == 0 && company.number > 0){
 800064c:	e026      	b.n	800069c <SCH_Dispatch_Tasks+0x54>
		sprintf(str, "TaskID %ld timeout at timestamp %d ms \r\n", company.head->taskID, timestamp);
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <SCH_Dispatch_Tasks+0x70>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4918      	ldr	r1, [pc, #96]	; (80006bc <SCH_Dispatch_Tasks+0x74>)
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <SCH_Dispatch_Tasks+0x78>)
 800065c:	f002 fc78 	bl	8002f50 <siprintf>
		sendSignal(str);
 8000660:	4817      	ldr	r0, [pc, #92]	; (80006c0 <SCH_Dispatch_Tasks+0x78>)
 8000662:	f7ff fdad 	bl	80001c0 <sendSignal>
		(*company.head->taskPointer)(); // execute toggle leds
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4798      	blx	r3
		if (company.head->Period != 0) SCH_Add_Task(company.head->taskPointer,
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00b      	beq.n	8000690 <SCH_Dispatch_Tasks+0x48>
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6818      	ldr	r0, [r3, #0]
				company.head->Period, company.head->Period);
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 8000680:	681b      	ldr	r3, [r3, #0]
		if (company.head->Period != 0) SCH_Add_Task(company.head->taskPointer,
 8000682:	68d9      	ldr	r1, [r3, #12]
				company.head->Period, company.head->Period);
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 8000686:	681b      	ldr	r3, [r3, #0]
		if (company.head->Period != 0) SCH_Add_Task(company.head->taskPointer,
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	461a      	mov	r2, r3
 800068c:	f7ff ff44 	bl	8000518 <SCH_Add_Task>
		SCH_Delete_Task(company.head->taskID);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffca 	bl	8000630 <SCH_Delete_Task>
	while (company.head->Delay == 0 && company.number > 0){
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d103      	bne.n	80006ae <SCH_Dispatch_Tasks+0x66>
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SCH_Dispatch_Tasks+0x6c>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dccf      	bgt.n	800064e <SCH_Dispatch_Tasks+0x6>
	}
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000130 	.word	0x20000130
 80006b8:	2000008c 	.word	0x2000008c
 80006bc:	08003670 	.word	0x08003670
 80006c0:	20000138 	.word	0x20000138

080006c4 <SCH_Update>:
void SCH_Update(){
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	timestamp += 10;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SCH_Update+0x34>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	330a      	adds	r3, #10
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <SCH_Update+0x34>)
 80006d0:	6013      	str	r3, [r2, #0]
	if (company.number != 0 && company.head->Delay != 0) company.head->Delay --;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <SCH_Update+0x38>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d009      	beq.n	80006ee <SCH_Update+0x2a>
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <SCH_Update+0x38>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d004      	beq.n	80006ee <SCH_Update+0x2a>
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <SCH_Update+0x38>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	3a01      	subs	r2, #1
 80006ec:	609a      	str	r2, [r3, #8]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	20000130 	.word	0x20000130

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_MspInit+0x5c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_MspInit+0x5c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x5c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x5c>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_MspInit+0x60>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_MspInit+0x60>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40021000 	.word	0x40021000
 8000760:	40010000 	.word	0x40010000

08000764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000774:	d113      	bne.n	800079e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_TIM_Base_MspInit+0x44>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	201c      	movs	r0, #28
 8000794:	f000 fa35 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000798:	201c      	movs	r0, #28
 800079a:	f000 fa4e 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a20      	ldr	r2, [pc, #128]	; (8000848 <HAL_UART_MspInit+0x9c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d139      	bne.n	8000840 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a18      	ldr	r2, [pc, #96]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_UART_MspInit+0xa0>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <HAL_UART_MspInit+0xa4>)
 8000812:	f000 fadf 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <HAL_UART_MspInit+0xa4>)
 800082c:	f000 fad2 	bl	8000dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2025      	movs	r0, #37	; 0x25
 8000836:	f000 f9e4 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800083a:	2025      	movs	r0, #37	; 0x25
 800083c:	f000 f9fd 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f8bf 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM2_IRQHandler+0x10>)
 80008aa:	f001 f8e9 	bl	8001a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000e8 	.word	0x200000e8

080008b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USART1_IRQHandler+0x10>)
 80008be:	f001 fcff 	bl	80022c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000a0 	.word	0x200000a0

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f002 fa30 	bl	8002d60 <__errno>
 8000900:	4603      	mov	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20002800 	.word	0x20002800
 800092c:	00000400 	.word	0x00000400
 8000930:	20000094 	.word	0x20000094
 8000934:	20000180 	.word	0x20000180

08000938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000944:	f7ff fff8 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094a:	490c      	ldr	r1, [pc, #48]	; (800097c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <LoopFillZerobss+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000960:	4c09      	ldr	r4, [pc, #36]	; (8000988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f002 f9fd 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fc39 	bl	80001e8 <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000980:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8000984:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000988:	20000180 	.word	0x20000180

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f923 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fea8 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f93b 	bl	8000c56 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f903 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	2000016c 	.word	0x2000016c

08000a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	2000016c 	.word	0x2000016c

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <__NVIC_EnableIRQ+0x34>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff2d 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff42 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff35 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d008      	beq.n	8000c98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2204      	movs	r2, #4
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e020      	b.n	8000cda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 020e 	bic.w	r2, r2, #14
 8000ca6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d005      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2204      	movs	r2, #4
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e051      	b.n	8000dac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 020e 	bic.w	r2, r2, #14
 8000d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_DMA_Abort_IT+0xd4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d029      	beq.n	8000d86 <HAL_DMA_Abort_IT+0xa2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <HAL_DMA_Abort_IT+0xd8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d022      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x9e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_DMA_Abort_IT+0xdc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01a      	beq.n	8000d7c <HAL_DMA_Abort_IT+0x98>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <HAL_DMA_Abort_IT+0xe0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d012      	beq.n	8000d76 <HAL_DMA_Abort_IT+0x92>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_DMA_Abort_IT+0xe4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00a      	beq.n	8000d70 <HAL_DMA_Abort_IT+0x8c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <HAL_DMA_Abort_IT+0xe8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <HAL_DMA_Abort_IT+0x86>
 8000d64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d68:	e00e      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d6e:	e00b      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	e008      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	e005      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	e002      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d82:	2310      	movs	r3, #16
 8000d84:	e000      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d86:	2301      	movs	r3, #1
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_DMA_Abort_IT+0xec>)
 8000d8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	4798      	blx	r3
    } 
  }
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40020008 	.word	0x40020008
 8000dbc:	4002001c 	.word	0x4002001c
 8000dc0:	40020030 	.word	0x40020030
 8000dc4:	40020044 	.word	0x40020044
 8000dc8:	40020058 	.word	0x40020058
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e148      	b.n	800107a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8137 	bne.w	8001074 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4aa3      	ldr	r2, [pc, #652]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d05e      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e10:	4aa1      	ldr	r2, [pc, #644]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d875      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e16:	4aa1      	ldr	r2, [pc, #644]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d058      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e1c:	4a9f      	ldr	r2, [pc, #636]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d86f      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e22:	4a9f      	ldr	r2, [pc, #636]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d052      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e28:	4a9d      	ldr	r2, [pc, #628]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d869      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a9d      	ldr	r2, [pc, #628]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d04c      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e34:	4a9b      	ldr	r2, [pc, #620]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d863      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a9b      	ldr	r2, [pc, #620]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d046      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e40:	4a99      	ldr	r2, [pc, #612]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d85d      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d82a      	bhi.n	8000ea0 <HAL_GPIO_Init+0xcc>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d859      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_GPIO_Init+0x80>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000ecf 	.word	0x08000ecf
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000ebb 	.word	0x08000ebb
 8000e60:	08000efd 	.word	0x08000efd
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f03 	.word	0x08000f03
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f03 	.word	0x08000f03
 8000e74:	08000f03 	.word	0x08000f03
 8000e78:	08000f03 	.word	0x08000f03
 8000e7c:	08000f03 	.word	0x08000f03
 8000e80:	08000f03 	.word	0x08000f03
 8000e84:	08000f03 	.word	0x08000f03
 8000e88:	08000f03 	.word	0x08000f03
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f03 	.word	0x08000f03
 8000e94:	08000f03 	.word	0x08000f03
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ec5 	.word	0x08000ec5
 8000ea0:	4a82      	ldr	r2, [pc, #520]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e02c      	b.n	8000f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e029      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e024      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e01f      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e01a      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e013      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	611a      	str	r2, [r3, #16]
          break;
 8000eee:	e009      	b.n	8000f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	615a      	str	r2, [r3, #20]
          break;
 8000efa:	e003      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          break;
 8000f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d801      	bhi.n	8000f0e <HAL_GPIO_Init+0x13a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_Init+0x13e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d802      	bhi.n	8000f20 <HAL_GPIO_Init+0x14c>
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x152>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3b08      	subs	r3, #8
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8090 	beq.w	8001074 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f54:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_GPIO_Init+0x2e4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2e8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1dc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a47      	ldr	r2, [pc, #284]	; (80010c0 <HAL_GPIO_Init+0x2ec>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1d8>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fac:	2303      	movs	r3, #3
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc6:	493b      	ldr	r1, [pc, #236]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	4937      	ldr	r1, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4933      	ldr	r1, [pc, #204]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	492d      	ldr	r1, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	4929      	ldr	r1, [pc, #164]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001020:	4013      	ands	r3, r2
 8001022:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4923      	ldr	r1, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	491f      	ldr	r1, [pc, #124]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001048:	4013      	ands	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4919      	ldr	r1, [pc, #100]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	4915      	ldr	r1, [pc, #84]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001070:	4013      	ands	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	3301      	adds	r3, #1
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	f47f aeaf 	bne.w	8000de8 <HAL_GPIO_Init+0x14>
  }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	372c      	adds	r7, #44	; 0x2c
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	10320000 	.word	0x10320000
 800109c:	10310000 	.word	0x10310000
 80010a0:	10220000 	.word	0x10220000
 80010a4:	10210000 	.word	0x10210000
 80010a8:	10120000 	.word	0x10120000
 80010ac:	10110000 	.word	0x10110000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	611a      	str	r2, [r3, #16]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4013      	ands	r3, r2
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43d9      	mvns	r1, r3
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	400b      	ands	r3, r1
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	611a      	str	r2, [r3, #16]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e26c      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114c:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00c      	beq.n	8001172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06c      	beq.n	8001258 <HAL_RCC_OscConfig+0x12c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d168      	bne.n	8001258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e246      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76>
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7f      	ldr	r2, [pc, #508]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e02e      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0xbc>
 80011ce:	4b72      	ldr	r3, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a71      	ldr	r2, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011e8:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6a      	ldr	r2, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b68      	ldr	r3, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a67      	ldr	r2, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc1a 	bl	8000a40 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fc16 	bl	8000a40 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1fa      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xe4>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fc06 	bl	8000a40 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fc02 	bl	8000a40 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1e6      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x10c>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1ba      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x270>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fbbb 	bl	8000a40 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fbb7 	bl	8000a40 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e19b      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x270>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fb9a 	bl	8000a40 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fb96 	bl	8000a40 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e17a      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d019      	beq.n	8001376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fb7a 	bl	8000a40 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fb76 	bl	8000a40 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e15a      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 facc 	bl	800190c <RCC_Delay>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fb60 	bl	8000a40 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fb5c 	bl	8000a40 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e140      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	42420000 	.word	0x42420000
 80013a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b9e      	ldr	r3, [pc, #632]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a6 	beq.w	800150a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b97      	ldr	r3, [pc, #604]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b94      	ldr	r3, [pc, #592]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a93      	ldr	r2, [pc, #588]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b91      	ldr	r3, [pc, #580]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb1d 	bl	8000a40 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fb19 	bl	8000a40 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0fd      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x4f8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001430:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a7a      	ldr	r2, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x334>
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a75      	ldr	r2, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b73      	ldr	r3, [pc, #460]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a72      	ldr	r2, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x356>
 8001468:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a6c      	ldr	r2, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a69      	ldr	r2, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a66      	ldr	r2, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a63      	ldr	r2, [pc, #396]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff facd 	bl	8000a40 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fac9 	bl	8000a40 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0ab      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b57      	ldr	r3, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x37e>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fab7 	bl	8000a40 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fab3 	bl	8000a40 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e095      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a47      	ldr	r2, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8081 	beq.w	8001616 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d061      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d146      	bne.n	80015b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_OscConfig+0x4fc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fa87 	bl	8000a40 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fa83 	bl	8000a40 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e067      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	492d      	ldr	r1, [pc, #180]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a19      	ldr	r1, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	430b      	orrs	r3, r1
 8001582:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_OscConfig+0x4fc>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fa57 	bl	8000a40 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fa53 	bl	8000a40 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e037      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
 80015b4:	e02f      	b.n	8001616 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_RCC_OscConfig+0x4fc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fa40 	bl	8000a40 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fa3c 	bl	8000a40 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e020      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x498>
 80015e2:	e018      	b.n	8001616 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e013      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	429a      	cmp	r2, r3
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
 8001628:	42420060 	.word	0x42420060

0800162c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0d0      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d910      	bls.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4965      	ldr	r1, [pc, #404]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d040      	beq.n	800174c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e073      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06b      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4936      	ldr	r1, [pc, #216]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff f990 	bl	8000a40 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff f98c 	bl	8000a40 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e053      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 020c 	and.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d1eb      	bne.n	8001724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d210      	bcs.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4922      	ldr	r1, [pc, #136]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	; (80017f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1cc>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1d0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8ee 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	0800369c 	.word	0x0800369c
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_RCC_GetSysClockFreq+0x94>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x30>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x36>
 800182e:	e027      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_GetSysClockFreq+0x98>)
 8001832:	613b      	str	r3, [r7, #16]
      break;
 8001834:	e027      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_RCC_GetSysClockFreq+0x94>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0c5b      	lsrs	r3, r3, #17
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_RCC_GetSysClockFreq+0x98>)
 8001862:	fb02 f203 	mul.w	r2, r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e004      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	613b      	str	r3, [r7, #16]
      break;
 800187e:	e002      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetSysClockFreq+0x98>)
 8001882:	613b      	str	r3, [r7, #16]
      break;
 8001884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001886:	693b      	ldr	r3, [r7, #16]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	007a1200 	.word	0x007a1200
 800189c:	080036b4 	.word	0x080036b4
 80018a0:	080036c4 	.word	0x080036c4
 80018a4:	003d0900 	.word	0x003d0900

080018a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c0:	f7ff fff2 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4903      	ldr	r1, [pc, #12]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	080036ac 	.word	0x080036ac

080018e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0adb      	lsrs	r3, r3, #11
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	080036ac 	.word	0x080036ac

0800190c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <RCC_Delay+0x34>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <RCC_Delay+0x38>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0a5b      	lsrs	r3, r3, #9
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001928:	bf00      	nop
  }
  while (Delay --);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	60fa      	str	r2, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f9      	bne.n	8001928 <RCC_Delay+0x1c>
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000000 	.word	0x20000000
 8001944:	10624dd3 	.word	0x10624dd3

08001948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e041      	b.n	80019de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7fe fef8 	bl	8000764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f000 fa6e 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d001      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e035      	b.n	8001a6c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_TIM_Base_Start_IT+0x90>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d009      	beq.n	8001a36 <HAL_TIM_Base_Start_IT+0x4e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2a:	d004      	beq.n	8001a36 <HAL_TIM_Base_Start_IT+0x4e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <HAL_TIM_Base_Start_IT+0x94>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d111      	bne.n	8001a5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d010      	beq.n	8001a6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a58:	e007      	b.n	8001a6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40000400 	.word	0x40000400

08001a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d122      	bne.n	8001adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d11b      	bne.n	8001adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0202 	mvn.w	r2, #2
 8001aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f9b4 	bl	8001e30 <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f9a7 	bl	8001e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f9b6 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d11b      	bne.n	8001b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0204 	mvn.w	r2, #4
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f98a 	bl	8001e30 <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f97d 	bl	8001e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f98c 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0208 	mvn.w	r2, #8
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f960 	bl	8001e30 <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f953 	bl	8001e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f962 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d122      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0210 	mvn.w	r2, #16
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2208      	movs	r2, #8
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f936 	bl	8001e30 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f929 	bl	8001e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f938 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0201 	mvn.w	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fc0e 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b80      	cmp	r3, #128	; 0x80
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fa6b 	bl	8002106 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b40      	cmp	r3, #64	; 0x40
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c48:	2b40      	cmp	r3, #64	; 0x40
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8fc 	bl	8001e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d10e      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d107      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0220 	mvn.w	r2, #32
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fa36 	bl	80020f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_TIM_ConfigClockSource+0x1c>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0b4      	b.n	8001e16 <HAL_TIM_ConfigClockSource+0x186>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce4:	d03e      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0xd4>
 8001ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cea:	f200 8087 	bhi.w	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf2:	f000 8086 	beq.w	8001e02 <HAL_TIM_ConfigClockSource+0x172>
 8001cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfa:	d87f      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001cfc:	2b70      	cmp	r3, #112	; 0x70
 8001cfe:	d01a      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0xa6>
 8001d00:	2b70      	cmp	r3, #112	; 0x70
 8001d02:	d87b      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d04:	2b60      	cmp	r3, #96	; 0x60
 8001d06:	d050      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0x11a>
 8001d08:	2b60      	cmp	r3, #96	; 0x60
 8001d0a:	d877      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d0c:	2b50      	cmp	r3, #80	; 0x50
 8001d0e:	d03c      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0xfa>
 8001d10:	2b50      	cmp	r3, #80	; 0x50
 8001d12:	d873      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d058      	beq.n	8001dca <HAL_TIM_ConfigClockSource+0x13a>
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d86f      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d1c:	2b30      	cmp	r3, #48	; 0x30
 8001d1e:	d064      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d20:	2b30      	cmp	r3, #48	; 0x30
 8001d22:	d86b      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d060      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d867      	bhi.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05c      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d05a      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x15a>
 8001d34:	e062      	b.n	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f000 f95e 	bl	8002006 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	609a      	str	r2, [r3, #8]
      break;
 8001d62:	e04f      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f000 f947 	bl	8002006 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d86:	609a      	str	r2, [r3, #8]
      break;
 8001d88:	e03c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f000 f8be 	bl	8001f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2150      	movs	r1, #80	; 0x50
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f915 	bl	8001fd2 <TIM_ITRx_SetConfig>
      break;
 8001da8:	e02c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f000 f8dc 	bl	8001f74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2160      	movs	r1, #96	; 0x60
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f905 	bl	8001fd2 <TIM_ITRx_SetConfig>
      break;
 8001dc8:	e01c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f000 f89e 	bl	8001f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2140      	movs	r1, #64	; 0x40
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f8f5 	bl	8001fd2 <TIM_ITRx_SetConfig>
      break;
 8001de8:	e00c      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f000 f8ec 	bl	8001fd2 <TIM_ITRx_SetConfig>
      break;
 8001dfa:	e003      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e000      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
	...

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <TIM_Base_SetConfig+0xa8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <TIM_Base_SetConfig+0x28>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d003      	beq.n	8001e90 <TIM_Base_SetConfig+0x28>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <TIM_Base_SetConfig+0xac>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d108      	bne.n	8001ea2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <TIM_Base_SetConfig+0xa8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <TIM_Base_SetConfig+0x52>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb0:	d003      	beq.n	8001eba <TIM_Base_SetConfig+0x52>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <TIM_Base_SetConfig+0xac>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <TIM_Base_SetConfig+0xa8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d103      	bne.n	8001f00 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	615a      	str	r2, [r3, #20]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40000400 	.word	0x40000400

08001f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f023 030a 	bic.w	r3, r3, #10
 8001f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	621a      	str	r2, [r3, #32]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f023 0210 	bic.w	r2, r3, #16
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	031b      	lsls	r3, r3, #12
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	621a      	str	r2, [r3, #32]
}
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f043 0307 	orr.w	r3, r3, #7
 8001ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002006:	b480      	push	{r7}
 8002008:	b087      	sub	sp, #28
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002020:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	431a      	orrs	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4313      	orrs	r3, r2
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002058:	2302      	movs	r3, #2
 800205a:	e041      	b.n	80020e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a14      	ldr	r2, [pc, #80]	; (80020ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d004      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10c      	bne.n	80020ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40000400 	.word	0x40000400

080020f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e042      	b.n	80021b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fb34 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fd71 	bl	8002c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d16d      	bne.n	80022b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_UART_Transmit+0x2c>
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e066      	b.n	80022b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2221      	movs	r2, #33	; 0x21
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f6:	f7fe fc23 	bl	8000a40 <HAL_GetTick>
 80021fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	88fa      	ldrh	r2, [r7, #6]
 8002206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002210:	d108      	bne.n	8002224 <HAL_UART_Transmit+0x6c>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e003      	b.n	800222c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800222c:	e02a      	b.n	8002284 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 faf9 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e036      	b.n	80022b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3302      	adds	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e007      	b.n	8002276 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1cf      	bne.n	800222e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fac9 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e006      	b.n	80022b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0ba      	sub	sp, #232	; 0xe8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_UART_IRQHandler+0x66>
 8002312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fbd1 	bl	8002ac6 <UART_Receive_IT>
      return;
 8002324:	e25b      	b.n	80027de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80de 	beq.w	80024ec <HAL_UART_IRQHandler+0x22c>
 8002330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800233c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002340:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80d1 	beq.w	80024ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800234a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_UART_IRQHandler+0xae>
 8002356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_UART_IRQHandler+0xd2>
 800237a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f043 0202 	orr.w	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_UART_IRQHandler+0xf6>
 800239e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0204 	orr.w	r2, r3, #4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <HAL_UART_IRQHandler+0x126>
 80023c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f043 0208 	orr.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 81f2 	beq.w	80027d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_UART_IRQHandler+0x14e>
 80023fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fb5c 	bl	8002ac6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_UART_IRQHandler+0x17a>
 8002432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d04f      	beq.n	80024da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa66 	bl	800290c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d041      	beq.n	80024d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800245c:	e853 3f00 	ldrex	r3, [r3]
 8002460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3314      	adds	r3, #20
 8002476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800247a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800247e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1d9      	bne.n	800244e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d013      	beq.n	80024ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	4a7e      	ldr	r2, [pc, #504]	; (80026a0 <HAL_UART_IRQHandler+0x3e0>)
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fc18 	bl	8000ce4 <HAL_DMA_Abort_IT>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024c4:	4610      	mov	r0, r2
 80024c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	e00e      	b.n	80024e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f99c 	bl	8002808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d0:	e00a      	b.n	80024e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f998 	bl	8002808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	e006      	b.n	80024e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f994 	bl	8002808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80024e6:	e175      	b.n	80027d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e8:	bf00      	nop
    return;
 80024ea:	e173      	b.n	80027d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f040 814f 	bne.w	8002794 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8148 	beq.w	8002794 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8141 	beq.w	8002794 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80b6 	beq.w	80026a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8145 	beq.w	80027d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002556:	429a      	cmp	r2, r3
 8002558:	f080 813e 	bcs.w	80027d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002562:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b20      	cmp	r3, #32
 800256c:	f000 8088 	beq.w	8002680 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800259c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025ac:	e841 2300 	strex	r3, r2, [r1]
 80025b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1d9      	bne.n	8002570 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3314      	adds	r3, #20
 80025c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c6:	e853 3f00 	ldrex	r3, [r3]
 80025ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3314      	adds	r3, #20
 80025dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ec:	e841 2300 	strex	r3, r2, [r1]
 80025f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e1      	bne.n	80025bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3314      	adds	r3, #20
 80025fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002602:	e853 3f00 	ldrex	r3, [r3]
 8002606:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800260e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800261c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800261e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002620:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002622:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002624:	e841 2300 	strex	r3, r2, [r1]
 8002628:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800262a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e3      	bne.n	80025f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002648:	e853 3f00 	ldrex	r3, [r3]
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800264e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002650:	f023 0310 	bic.w	r3, r3, #16
 8002654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002662:	65ba      	str	r2, [r7, #88]	; 0x58
 8002664:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002666:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800266a:	e841 2300 	strex	r3, r2, [r1]
 800266e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1e3      	bne.n	800263e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe faf7 	bl	8000c6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800268e:	b29b      	uxth	r3, r3
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8bf 	bl	800281a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800269c:	e09c      	b.n	80027d8 <HAL_UART_IRQHandler+0x518>
 800269e:	bf00      	nop
 80026a0:	080029d1 	.word	0x080029d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 808e 	beq.w	80027dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8089 	beq.w	80027dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026ee:	647a      	str	r2, [r7, #68]	; 0x44
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026f6:	e841 2300 	strex	r3, r2, [r1]
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e3      	bne.n	80026ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	e853 3f00 	ldrex	r3, [r3]
 8002710:	623b      	str	r3, [r7, #32]
   return(result);
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3314      	adds	r3, #20
 8002722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002726:	633a      	str	r2, [r7, #48]	; 0x30
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e3      	bne.n	8002702 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	60fb      	str	r3, [r7, #12]
   return(result);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0310 	bic.w	r3, r3, #16
 800275e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800276c:	61fa      	str	r2, [r7, #28]
 800276e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	e841 2300 	strex	r3, r2, [r1]
 8002778:	617b      	str	r3, [r7, #20]
   return(result);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e3      	bne.n	8002748 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f844 	bl	800281a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002792:	e023      	b.n	80027dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_UART_IRQHandler+0x4f4>
 80027a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f923 	bl	80029f8 <UART_Transmit_IT>
    return;
 80027b2:	e014      	b.n	80027de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <HAL_UART_IRQHandler+0x51e>
 80027c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f962 	bl	8002a96 <UART_EndTransmit_IT>
    return;
 80027d2:	e004      	b.n	80027de <HAL_UART_IRQHandler+0x51e>
    return;
 80027d4:	bf00      	nop
 80027d6:	e002      	b.n	80027de <HAL_UART_IRQHandler+0x51e>
      return;
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <HAL_UART_IRQHandler+0x51e>
      return;
 80027dc:	bf00      	nop
  }
}
 80027de:	37e8      	adds	r7, #232	; 0xe8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b090      	sub	sp, #64	; 0x40
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002840:	e050      	b.n	80028e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d04c      	beq.n	80028e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <UART_WaitOnFlagUntilTimeout+0x30>
 8002850:	f7fe f8f6 	bl	8000a40 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800285c:	429a      	cmp	r2, r3
 800285e:	d241      	bcs.n	80028e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002880:	637a      	str	r2, [r7, #52]	; 0x34
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e5      	bne.n	8002860 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	613b      	str	r3, [r7, #16]
   return(result);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b4:	623a      	str	r2, [r7, #32]
 80028b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	69f9      	ldr	r1, [r7, #28]
 80028ba:	6a3a      	ldr	r2, [r7, #32]
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e00f      	b.n	8002904 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d09f      	beq.n	8002842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3740      	adds	r7, #64	; 0x40
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800290c:	b480      	push	{r7}
 800290e:	b095      	sub	sp, #84	; 0x54
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291e:	e853 3f00 	ldrex	r3, [r3]
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800292a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002934:	643a      	str	r2, [r7, #64]	; 0x40
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800293a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800293c:	e841 2300 	strex	r3, r2, [r1]
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e5      	bne.n	8002914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	61fb      	str	r3, [r7, #28]
   return(result);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e5      	bne.n	8002948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	2b01      	cmp	r3, #1
 8002982:	d119      	bne.n	80029b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	e853 3f00 	ldrex	r3, [r3]
 8002992:	60bb      	str	r3, [r7, #8]
   return(result);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f023 0310 	bic.w	r3, r3, #16
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a4:	61ba      	str	r2, [r7, #24]
 80029a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a8:	6979      	ldr	r1, [r7, #20]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	e841 2300 	strex	r3, r2, [r1]
 80029b0:	613b      	str	r3, [r7, #16]
   return(result);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e5      	bne.n	8002984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029c6:	bf00      	nop
 80029c8:	3754      	adds	r7, #84	; 0x54
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff0c 	bl	8002808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b21      	cmp	r3, #33	; 0x21
 8002a0a:	d13e      	bne.n	8002a8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a14:	d114      	bne.n	8002a40 <UART_Transmit_IT+0x48>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d110      	bne.n	8002a40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]
 8002a3e:	e008      	b.n	8002a52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	1c59      	adds	r1, r3, #1
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6211      	str	r1, [r2, #32]
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fe94 	bl	80027e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08c      	sub	sp, #48	; 0x30
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b22      	cmp	r3, #34	; 0x22
 8002ad8:	f040 80ae 	bne.w	8002c38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d117      	bne.n	8002b16 <UART_Receive_IT+0x50>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d113      	bne.n	8002b16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	1c9a      	adds	r2, r3, #2
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
 8002b14:	e026      	b.n	8002b64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	d007      	beq.n	8002b3a <UART_Receive_IT+0x74>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <UART_Receive_IT+0x82>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e008      	b.n	8002b5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4619      	mov	r1, r3
 8002b72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d15d      	bne.n	8002c34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0220 	bic.w	r2, r2, #32
 8002b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d135      	bne.n	8002c2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f023 0310 	bic.w	r3, r3, #16
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	623a      	str	r2, [r7, #32]
 8002be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	69f9      	ldr	r1, [r7, #28]
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e5      	bne.n	8002bc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d10a      	bne.n	8002c1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fdf9 	bl	800281a <HAL_UARTEx_RxEventCallback>
 8002c28:	e002      	b.n	8002c30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fde3 	bl	80027f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e002      	b.n	8002c3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3730      	adds	r7, #48	; 0x30
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c7e:	f023 030c 	bic.w	r3, r3, #12
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <UART_SetConfig+0x114>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cac:	f7fe fe1a 	bl	80018e4 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	e002      	b.n	8002cba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f7fe fe02 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009a      	lsls	r2, r3, #2
 8002cc4:	441a      	add	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <UART_SetConfig+0x118>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	0119      	lsls	r1, r3, #4
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <UART_SetConfig+0x118>)
 8002cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2064      	movs	r0, #100	; 0x64
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	3332      	adds	r3, #50	; 0x32
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <UART_SetConfig+0x118>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d10:	4419      	add	r1, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009a      	lsls	r2, r3, #2
 8002d1c:	441a      	add	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <UART_SetConfig+0x118>)
 8002d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2064      	movs	r0, #100	; 0x64
 8002d32:	fb00 f303 	mul.w	r3, r0, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	3332      	adds	r3, #50	; 0x32
 8002d3c:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <UART_SetConfig+0x118>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	51eb851f 	.word	0x51eb851f

08002d60 <__errno>:
 8002d60:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <__errno+0x8>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000000c 	.word	0x2000000c

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	2600      	movs	r6, #0
 8002d70:	4d0c      	ldr	r5, [pc, #48]	; (8002da4 <__libc_init_array+0x38>)
 8002d72:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	f000 fc6c 	bl	8003658 <_init>
 8002d80:	2600      	movs	r6, #0
 8002d82:	4d0a      	ldr	r5, [pc, #40]	; (8002dac <__libc_init_array+0x40>)
 8002d84:	4c0a      	ldr	r4, [pc, #40]	; (8002db0 <__libc_init_array+0x44>)
 8002d86:	1b64      	subs	r4, r4, r5
 8002d88:	10a4      	asrs	r4, r4, #2
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	080036fc 	.word	0x080036fc
 8002da8:	080036fc 	.word	0x080036fc
 8002dac:	080036fc 	.word	0x080036fc
 8002db0:	08003700 	.word	0x08003700

08002db4 <malloc>:
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <malloc+0xc>)
 8002db6:	4601      	mov	r1, r0
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	f000 b85f 	b.w	8002e7c <_malloc_r>
 8002dbe:	bf00      	nop
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <free>:
 8002dc4:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <free+0xc>)
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	f000 b80b 	b.w	8002de4 <_free_r>
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <memset>:
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <_free_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4605      	mov	r5, r0
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d043      	beq.n	8002e74 <_free_r+0x90>
 8002dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df0:	1f0c      	subs	r4, r1, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bfb8      	it	lt
 8002df6:	18e4      	addlt	r4, r4, r3
 8002df8:	f000 f8ca 	bl	8002f90 <__malloc_lock>
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <_free_r+0x94>)
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	4610      	mov	r0, r2
 8002e02:	b933      	cbnz	r3, 8002e12 <_free_r+0x2e>
 8002e04:	6063      	str	r3, [r4, #4]
 8002e06:	6014      	str	r4, [r2, #0]
 8002e08:	4628      	mov	r0, r5
 8002e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e0e:	f000 b8c5 	b.w	8002f9c <__malloc_unlock>
 8002e12:	42a3      	cmp	r3, r4
 8002e14:	d90a      	bls.n	8002e2c <_free_r+0x48>
 8002e16:	6821      	ldr	r1, [r4, #0]
 8002e18:	1862      	adds	r2, r4, r1
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	bf01      	itttt	eq
 8002e1e:	681a      	ldreq	r2, [r3, #0]
 8002e20:	685b      	ldreq	r3, [r3, #4]
 8002e22:	1852      	addeq	r2, r2, r1
 8002e24:	6022      	streq	r2, [r4, #0]
 8002e26:	6063      	str	r3, [r4, #4]
 8002e28:	6004      	str	r4, [r0, #0]
 8002e2a:	e7ed      	b.n	8002e08 <_free_r+0x24>
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	b10b      	cbz	r3, 8002e36 <_free_r+0x52>
 8002e32:	42a3      	cmp	r3, r4
 8002e34:	d9fa      	bls.n	8002e2c <_free_r+0x48>
 8002e36:	6811      	ldr	r1, [r2, #0]
 8002e38:	1850      	adds	r0, r2, r1
 8002e3a:	42a0      	cmp	r0, r4
 8002e3c:	d10b      	bne.n	8002e56 <_free_r+0x72>
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	4401      	add	r1, r0
 8002e42:	1850      	adds	r0, r2, r1
 8002e44:	4283      	cmp	r3, r0
 8002e46:	6011      	str	r1, [r2, #0]
 8002e48:	d1de      	bne.n	8002e08 <_free_r+0x24>
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4401      	add	r1, r0
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	6053      	str	r3, [r2, #4]
 8002e54:	e7d8      	b.n	8002e08 <_free_r+0x24>
 8002e56:	d902      	bls.n	8002e5e <_free_r+0x7a>
 8002e58:	230c      	movs	r3, #12
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	e7d4      	b.n	8002e08 <_free_r+0x24>
 8002e5e:	6820      	ldr	r0, [r4, #0]
 8002e60:	1821      	adds	r1, r4, r0
 8002e62:	428b      	cmp	r3, r1
 8002e64:	bf01      	itttt	eq
 8002e66:	6819      	ldreq	r1, [r3, #0]
 8002e68:	685b      	ldreq	r3, [r3, #4]
 8002e6a:	1809      	addeq	r1, r1, r0
 8002e6c:	6021      	streq	r1, [r4, #0]
 8002e6e:	6063      	str	r3, [r4, #4]
 8002e70:	6054      	str	r4, [r2, #4]
 8002e72:	e7c9      	b.n	8002e08 <_free_r+0x24>
 8002e74:	bd38      	pop	{r3, r4, r5, pc}
 8002e76:	bf00      	nop
 8002e78:	20000098 	.word	0x20000098

08002e7c <_malloc_r>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	1ccd      	adds	r5, r1, #3
 8002e80:	f025 0503 	bic.w	r5, r5, #3
 8002e84:	3508      	adds	r5, #8
 8002e86:	2d0c      	cmp	r5, #12
 8002e88:	bf38      	it	cc
 8002e8a:	250c      	movcc	r5, #12
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	4606      	mov	r6, r0
 8002e90:	db01      	blt.n	8002e96 <_malloc_r+0x1a>
 8002e92:	42a9      	cmp	r1, r5
 8002e94:	d903      	bls.n	8002e9e <_malloc_r+0x22>
 8002e96:	230c      	movs	r3, #12
 8002e98:	6033      	str	r3, [r6, #0]
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e9e:	f000 f877 	bl	8002f90 <__malloc_lock>
 8002ea2:	4921      	ldr	r1, [pc, #132]	; (8002f28 <_malloc_r+0xac>)
 8002ea4:	680a      	ldr	r2, [r1, #0]
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	b99c      	cbnz	r4, 8002ed2 <_malloc_r+0x56>
 8002eaa:	4f20      	ldr	r7, [pc, #128]	; (8002f2c <_malloc_r+0xb0>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	b923      	cbnz	r3, 8002eba <_malloc_r+0x3e>
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	f000 f83c 	bl	8002f30 <_sbrk_r>
 8002eb8:	6038      	str	r0, [r7, #0]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	f000 f837 	bl	8002f30 <_sbrk_r>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	d123      	bne.n	8002f0e <_malloc_r+0x92>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	4630      	mov	r0, r6
 8002eca:	6033      	str	r3, [r6, #0]
 8002ecc:	f000 f866 	bl	8002f9c <__malloc_unlock>
 8002ed0:	e7e3      	b.n	8002e9a <_malloc_r+0x1e>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	1b5b      	subs	r3, r3, r5
 8002ed6:	d417      	bmi.n	8002f08 <_malloc_r+0x8c>
 8002ed8:	2b0b      	cmp	r3, #11
 8002eda:	d903      	bls.n	8002ee4 <_malloc_r+0x68>
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	441c      	add	r4, r3
 8002ee0:	6025      	str	r5, [r4, #0]
 8002ee2:	e004      	b.n	8002eee <_malloc_r+0x72>
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	42a2      	cmp	r2, r4
 8002ee8:	bf0c      	ite	eq
 8002eea:	600b      	streq	r3, [r1, #0]
 8002eec:	6053      	strne	r3, [r2, #4]
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f000 f854 	bl	8002f9c <__malloc_unlock>
 8002ef4:	f104 000b 	add.w	r0, r4, #11
 8002ef8:	1d23      	adds	r3, r4, #4
 8002efa:	f020 0007 	bic.w	r0, r0, #7
 8002efe:	1ac2      	subs	r2, r0, r3
 8002f00:	d0cc      	beq.n	8002e9c <_malloc_r+0x20>
 8002f02:	1a1b      	subs	r3, r3, r0
 8002f04:	50a3      	str	r3, [r4, r2]
 8002f06:	e7c9      	b.n	8002e9c <_malloc_r+0x20>
 8002f08:	4622      	mov	r2, r4
 8002f0a:	6864      	ldr	r4, [r4, #4]
 8002f0c:	e7cc      	b.n	8002ea8 <_malloc_r+0x2c>
 8002f0e:	1cc4      	adds	r4, r0, #3
 8002f10:	f024 0403 	bic.w	r4, r4, #3
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d0e3      	beq.n	8002ee0 <_malloc_r+0x64>
 8002f18:	1a21      	subs	r1, r4, r0
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f000 f808 	bl	8002f30 <_sbrk_r>
 8002f20:	3001      	adds	r0, #1
 8002f22:	d1dd      	bne.n	8002ee0 <_malloc_r+0x64>
 8002f24:	e7cf      	b.n	8002ec6 <_malloc_r+0x4a>
 8002f26:	bf00      	nop
 8002f28:	20000098 	.word	0x20000098
 8002f2c:	2000009c 	.word	0x2000009c

08002f30 <_sbrk_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	2300      	movs	r3, #0
 8002f34:	4d05      	ldr	r5, [pc, #20]	; (8002f4c <_sbrk_r+0x1c>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	f7fd fcc6 	bl	80008cc <_sbrk>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_sbrk_r+0x1a>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_sbrk_r+0x1a>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000170 	.word	0x20000170

08002f50 <siprintf>:
 8002f50:	b40e      	push	{r1, r2, r3}
 8002f52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f56:	b500      	push	{lr}
 8002f58:	b09c      	sub	sp, #112	; 0x70
 8002f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f5c:	9002      	str	r0, [sp, #8]
 8002f5e:	9006      	str	r0, [sp, #24]
 8002f60:	9107      	str	r1, [sp, #28]
 8002f62:	9104      	str	r1, [sp, #16]
 8002f64:	4808      	ldr	r0, [pc, #32]	; (8002f88 <siprintf+0x38>)
 8002f66:	4909      	ldr	r1, [pc, #36]	; (8002f8c <siprintf+0x3c>)
 8002f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f6c:	9105      	str	r1, [sp, #20]
 8002f6e:	6800      	ldr	r0, [r0, #0]
 8002f70:	a902      	add	r1, sp, #8
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	f000 f874 	bl	8003060 <_svfiprintf_r>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	9b02      	ldr	r3, [sp, #8]
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	b01c      	add	sp, #112	; 0x70
 8002f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f84:	b003      	add	sp, #12
 8002f86:	4770      	bx	lr
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	ffff0208 	.word	0xffff0208

08002f90 <__malloc_lock>:
 8002f90:	4801      	ldr	r0, [pc, #4]	; (8002f98 <__malloc_lock+0x8>)
 8002f92:	f000 bafb 	b.w	800358c <__retarget_lock_acquire_recursive>
 8002f96:	bf00      	nop
 8002f98:	20000178 	.word	0x20000178

08002f9c <__malloc_unlock>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	; (8002fa4 <__malloc_unlock+0x8>)
 8002f9e:	f000 baf6 	b.w	800358e <__retarget_lock_release_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	20000178 	.word	0x20000178

08002fa8 <__ssputs_r>:
 8002fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	688e      	ldr	r6, [r1, #8]
 8002fae:	4682      	mov	sl, r0
 8002fb0:	429e      	cmp	r6, r3
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	461f      	mov	r7, r3
 8002fb8:	d838      	bhi.n	800302c <__ssputs_r+0x84>
 8002fba:	898a      	ldrh	r2, [r1, #12]
 8002fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fc0:	d032      	beq.n	8003028 <__ssputs_r+0x80>
 8002fc2:	6825      	ldr	r5, [r4, #0]
 8002fc4:	6909      	ldr	r1, [r1, #16]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	eba5 0901 	sub.w	r9, r5, r1
 8002fcc:	6965      	ldr	r5, [r4, #20]
 8002fce:	444b      	add	r3, r9
 8002fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fd8:	106d      	asrs	r5, r5, #1
 8002fda:	429d      	cmp	r5, r3
 8002fdc:	bf38      	it	cc
 8002fde:	461d      	movcc	r5, r3
 8002fe0:	0553      	lsls	r3, r2, #21
 8002fe2:	d531      	bpl.n	8003048 <__ssputs_r+0xa0>
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7ff ff49 	bl	8002e7c <_malloc_r>
 8002fea:	4606      	mov	r6, r0
 8002fec:	b950      	cbnz	r0, 8003004 <__ssputs_r+0x5c>
 8002fee:	230c      	movs	r3, #12
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f8ca 3000 	str.w	r3, [sl]
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003004:	464a      	mov	r2, r9
 8003006:	6921      	ldr	r1, [r4, #16]
 8003008:	f000 fad0 	bl	80035ac <memcpy>
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003016:	81a3      	strh	r3, [r4, #12]
 8003018:	6126      	str	r6, [r4, #16]
 800301a:	444e      	add	r6, r9
 800301c:	6026      	str	r6, [r4, #0]
 800301e:	463e      	mov	r6, r7
 8003020:	6165      	str	r5, [r4, #20]
 8003022:	eba5 0509 	sub.w	r5, r5, r9
 8003026:	60a5      	str	r5, [r4, #8]
 8003028:	42be      	cmp	r6, r7
 800302a:	d900      	bls.n	800302e <__ssputs_r+0x86>
 800302c:	463e      	mov	r6, r7
 800302e:	4632      	mov	r2, r6
 8003030:	4641      	mov	r1, r8
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	f000 fac8 	bl	80035c8 <memmove>
 8003038:	68a3      	ldr	r3, [r4, #8]
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	1b9b      	subs	r3, r3, r6
 800303e:	4432      	add	r2, r6
 8003040:	2000      	movs	r0, #0
 8003042:	60a3      	str	r3, [r4, #8]
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	e7db      	b.n	8003000 <__ssputs_r+0x58>
 8003048:	462a      	mov	r2, r5
 800304a:	f000 fad7 	bl	80035fc <_realloc_r>
 800304e:	4606      	mov	r6, r0
 8003050:	2800      	cmp	r0, #0
 8003052:	d1e1      	bne.n	8003018 <__ssputs_r+0x70>
 8003054:	4650      	mov	r0, sl
 8003056:	6921      	ldr	r1, [r4, #16]
 8003058:	f7ff fec4 	bl	8002de4 <_free_r>
 800305c:	e7c7      	b.n	8002fee <__ssputs_r+0x46>
	...

08003060 <_svfiprintf_r>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	4698      	mov	r8, r3
 8003066:	898b      	ldrh	r3, [r1, #12]
 8003068:	4607      	mov	r7, r0
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	460d      	mov	r5, r1
 800306e:	4614      	mov	r4, r2
 8003070:	b09d      	sub	sp, #116	; 0x74
 8003072:	d50e      	bpl.n	8003092 <_svfiprintf_r+0x32>
 8003074:	690b      	ldr	r3, [r1, #16]
 8003076:	b963      	cbnz	r3, 8003092 <_svfiprintf_r+0x32>
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	f7ff feff 	bl	8002e7c <_malloc_r>
 800307e:	6028      	str	r0, [r5, #0]
 8003080:	6128      	str	r0, [r5, #16]
 8003082:	b920      	cbnz	r0, 800308e <_svfiprintf_r+0x2e>
 8003084:	230c      	movs	r3, #12
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	e0d1      	b.n	8003232 <_svfiprintf_r+0x1d2>
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	616b      	str	r3, [r5, #20]
 8003092:	2300      	movs	r3, #0
 8003094:	9309      	str	r3, [sp, #36]	; 0x24
 8003096:	2320      	movs	r3, #32
 8003098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800309c:	2330      	movs	r3, #48	; 0x30
 800309e:	f04f 0901 	mov.w	r9, #1
 80030a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80030a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800324c <_svfiprintf_r+0x1ec>
 80030aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030ae:	4623      	mov	r3, r4
 80030b0:	469a      	mov	sl, r3
 80030b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030b6:	b10a      	cbz	r2, 80030bc <_svfiprintf_r+0x5c>
 80030b8:	2a25      	cmp	r2, #37	; 0x25
 80030ba:	d1f9      	bne.n	80030b0 <_svfiprintf_r+0x50>
 80030bc:	ebba 0b04 	subs.w	fp, sl, r4
 80030c0:	d00b      	beq.n	80030da <_svfiprintf_r+0x7a>
 80030c2:	465b      	mov	r3, fp
 80030c4:	4622      	mov	r2, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	4638      	mov	r0, r7
 80030ca:	f7ff ff6d 	bl	8002fa8 <__ssputs_r>
 80030ce:	3001      	adds	r0, #1
 80030d0:	f000 80aa 	beq.w	8003228 <_svfiprintf_r+0x1c8>
 80030d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030d6:	445a      	add	r2, fp
 80030d8:	9209      	str	r2, [sp, #36]	; 0x24
 80030da:	f89a 3000 	ldrb.w	r3, [sl]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80a2 	beq.w	8003228 <_svfiprintf_r+0x1c8>
 80030e4:	2300      	movs	r3, #0
 80030e6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ee:	f10a 0a01 	add.w	sl, sl, #1
 80030f2:	9304      	str	r3, [sp, #16]
 80030f4:	9307      	str	r3, [sp, #28]
 80030f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030fa:	931a      	str	r3, [sp, #104]	; 0x68
 80030fc:	4654      	mov	r4, sl
 80030fe:	2205      	movs	r2, #5
 8003100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003104:	4851      	ldr	r0, [pc, #324]	; (800324c <_svfiprintf_r+0x1ec>)
 8003106:	f000 fa43 	bl	8003590 <memchr>
 800310a:	9a04      	ldr	r2, [sp, #16]
 800310c:	b9d8      	cbnz	r0, 8003146 <_svfiprintf_r+0xe6>
 800310e:	06d0      	lsls	r0, r2, #27
 8003110:	bf44      	itt	mi
 8003112:	2320      	movmi	r3, #32
 8003114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003118:	0711      	lsls	r1, r2, #28
 800311a:	bf44      	itt	mi
 800311c:	232b      	movmi	r3, #43	; 0x2b
 800311e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003122:	f89a 3000 	ldrb.w	r3, [sl]
 8003126:	2b2a      	cmp	r3, #42	; 0x2a
 8003128:	d015      	beq.n	8003156 <_svfiprintf_r+0xf6>
 800312a:	4654      	mov	r4, sl
 800312c:	2000      	movs	r0, #0
 800312e:	f04f 0c0a 	mov.w	ip, #10
 8003132:	9a07      	ldr	r2, [sp, #28]
 8003134:	4621      	mov	r1, r4
 8003136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800313a:	3b30      	subs	r3, #48	; 0x30
 800313c:	2b09      	cmp	r3, #9
 800313e:	d94e      	bls.n	80031de <_svfiprintf_r+0x17e>
 8003140:	b1b0      	cbz	r0, 8003170 <_svfiprintf_r+0x110>
 8003142:	9207      	str	r2, [sp, #28]
 8003144:	e014      	b.n	8003170 <_svfiprintf_r+0x110>
 8003146:	eba0 0308 	sub.w	r3, r0, r8
 800314a:	fa09 f303 	lsl.w	r3, r9, r3
 800314e:	4313      	orrs	r3, r2
 8003150:	46a2      	mov	sl, r4
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	e7d2      	b.n	80030fc <_svfiprintf_r+0x9c>
 8003156:	9b03      	ldr	r3, [sp, #12]
 8003158:	1d19      	adds	r1, r3, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	9103      	str	r1, [sp, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	bfbb      	ittet	lt
 8003162:	425b      	neglt	r3, r3
 8003164:	f042 0202 	orrlt.w	r2, r2, #2
 8003168:	9307      	strge	r3, [sp, #28]
 800316a:	9307      	strlt	r3, [sp, #28]
 800316c:	bfb8      	it	lt
 800316e:	9204      	strlt	r2, [sp, #16]
 8003170:	7823      	ldrb	r3, [r4, #0]
 8003172:	2b2e      	cmp	r3, #46	; 0x2e
 8003174:	d10c      	bne.n	8003190 <_svfiprintf_r+0x130>
 8003176:	7863      	ldrb	r3, [r4, #1]
 8003178:	2b2a      	cmp	r3, #42	; 0x2a
 800317a:	d135      	bne.n	80031e8 <_svfiprintf_r+0x188>
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	3402      	adds	r4, #2
 8003180:	1d1a      	adds	r2, r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	9203      	str	r2, [sp, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	bfb8      	it	lt
 800318a:	f04f 33ff 	movlt.w	r3, #4294967295
 800318e:	9305      	str	r3, [sp, #20]
 8003190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800325c <_svfiprintf_r+0x1fc>
 8003194:	2203      	movs	r2, #3
 8003196:	4650      	mov	r0, sl
 8003198:	7821      	ldrb	r1, [r4, #0]
 800319a:	f000 f9f9 	bl	8003590 <memchr>
 800319e:	b140      	cbz	r0, 80031b2 <_svfiprintf_r+0x152>
 80031a0:	2340      	movs	r3, #64	; 0x40
 80031a2:	eba0 000a 	sub.w	r0, r0, sl
 80031a6:	fa03 f000 	lsl.w	r0, r3, r0
 80031aa:	9b04      	ldr	r3, [sp, #16]
 80031ac:	3401      	adds	r4, #1
 80031ae:	4303      	orrs	r3, r0
 80031b0:	9304      	str	r3, [sp, #16]
 80031b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b6:	2206      	movs	r2, #6
 80031b8:	4825      	ldr	r0, [pc, #148]	; (8003250 <_svfiprintf_r+0x1f0>)
 80031ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031be:	f000 f9e7 	bl	8003590 <memchr>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d038      	beq.n	8003238 <_svfiprintf_r+0x1d8>
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <_svfiprintf_r+0x1f4>)
 80031c8:	bb1b      	cbnz	r3, 8003212 <_svfiprintf_r+0x1b2>
 80031ca:	9b03      	ldr	r3, [sp, #12]
 80031cc:	3307      	adds	r3, #7
 80031ce:	f023 0307 	bic.w	r3, r3, #7
 80031d2:	3308      	adds	r3, #8
 80031d4:	9303      	str	r3, [sp, #12]
 80031d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031d8:	4433      	add	r3, r6
 80031da:	9309      	str	r3, [sp, #36]	; 0x24
 80031dc:	e767      	b.n	80030ae <_svfiprintf_r+0x4e>
 80031de:	460c      	mov	r4, r1
 80031e0:	2001      	movs	r0, #1
 80031e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80031e6:	e7a5      	b.n	8003134 <_svfiprintf_r+0xd4>
 80031e8:	2300      	movs	r3, #0
 80031ea:	f04f 0c0a 	mov.w	ip, #10
 80031ee:	4619      	mov	r1, r3
 80031f0:	3401      	adds	r4, #1
 80031f2:	9305      	str	r3, [sp, #20]
 80031f4:	4620      	mov	r0, r4
 80031f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031fa:	3a30      	subs	r2, #48	; 0x30
 80031fc:	2a09      	cmp	r2, #9
 80031fe:	d903      	bls.n	8003208 <_svfiprintf_r+0x1a8>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0c5      	beq.n	8003190 <_svfiprintf_r+0x130>
 8003204:	9105      	str	r1, [sp, #20]
 8003206:	e7c3      	b.n	8003190 <_svfiprintf_r+0x130>
 8003208:	4604      	mov	r4, r0
 800320a:	2301      	movs	r3, #1
 800320c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003210:	e7f0      	b.n	80031f4 <_svfiprintf_r+0x194>
 8003212:	ab03      	add	r3, sp, #12
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	462a      	mov	r2, r5
 8003218:	4638      	mov	r0, r7
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <_svfiprintf_r+0x1f8>)
 800321c:	a904      	add	r1, sp, #16
 800321e:	f3af 8000 	nop.w
 8003222:	1c42      	adds	r2, r0, #1
 8003224:	4606      	mov	r6, r0
 8003226:	d1d6      	bne.n	80031d6 <_svfiprintf_r+0x176>
 8003228:	89ab      	ldrh	r3, [r5, #12]
 800322a:	065b      	lsls	r3, r3, #25
 800322c:	f53f af2c 	bmi.w	8003088 <_svfiprintf_r+0x28>
 8003230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003232:	b01d      	add	sp, #116	; 0x74
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003238:	ab03      	add	r3, sp, #12
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	462a      	mov	r2, r5
 800323e:	4638      	mov	r0, r7
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <_svfiprintf_r+0x1f8>)
 8003242:	a904      	add	r1, sp, #16
 8003244:	f000 f87c 	bl	8003340 <_printf_i>
 8003248:	e7eb      	b.n	8003222 <_svfiprintf_r+0x1c2>
 800324a:	bf00      	nop
 800324c:	080036c6 	.word	0x080036c6
 8003250:	080036d0 	.word	0x080036d0
 8003254:	00000000 	.word	0x00000000
 8003258:	08002fa9 	.word	0x08002fa9
 800325c:	080036cc 	.word	0x080036cc

08003260 <_printf_common>:
 8003260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003264:	4616      	mov	r6, r2
 8003266:	4699      	mov	r9, r3
 8003268:	688a      	ldr	r2, [r1, #8]
 800326a:	690b      	ldr	r3, [r1, #16]
 800326c:	4607      	mov	r7, r0
 800326e:	4293      	cmp	r3, r2
 8003270:	bfb8      	it	lt
 8003272:	4613      	movlt	r3, r2
 8003274:	6033      	str	r3, [r6, #0]
 8003276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800327a:	460c      	mov	r4, r1
 800327c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003280:	b10a      	cbz	r2, 8003286 <_printf_common+0x26>
 8003282:	3301      	adds	r3, #1
 8003284:	6033      	str	r3, [r6, #0]
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	0699      	lsls	r1, r3, #26
 800328a:	bf42      	ittt	mi
 800328c:	6833      	ldrmi	r3, [r6, #0]
 800328e:	3302      	addmi	r3, #2
 8003290:	6033      	strmi	r3, [r6, #0]
 8003292:	6825      	ldr	r5, [r4, #0]
 8003294:	f015 0506 	ands.w	r5, r5, #6
 8003298:	d106      	bne.n	80032a8 <_printf_common+0x48>
 800329a:	f104 0a19 	add.w	sl, r4, #25
 800329e:	68e3      	ldr	r3, [r4, #12]
 80032a0:	6832      	ldr	r2, [r6, #0]
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	42ab      	cmp	r3, r5
 80032a6:	dc28      	bgt.n	80032fa <_printf_common+0x9a>
 80032a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032ac:	1e13      	subs	r3, r2, #0
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	bf18      	it	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	0692      	lsls	r2, r2, #26
 80032b6:	d42d      	bmi.n	8003314 <_printf_common+0xb4>
 80032b8:	4649      	mov	r1, r9
 80032ba:	4638      	mov	r0, r7
 80032bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032c0:	47c0      	blx	r8
 80032c2:	3001      	adds	r0, #1
 80032c4:	d020      	beq.n	8003308 <_printf_common+0xa8>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	68e5      	ldr	r5, [r4, #12]
 80032ca:	f003 0306 	and.w	r3, r3, #6
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf18      	it	ne
 80032d2:	2500      	movne	r5, #0
 80032d4:	6832      	ldr	r2, [r6, #0]
 80032d6:	f04f 0600 	mov.w	r6, #0
 80032da:	68a3      	ldr	r3, [r4, #8]
 80032dc:	bf08      	it	eq
 80032de:	1aad      	subeq	r5, r5, r2
 80032e0:	6922      	ldr	r2, [r4, #16]
 80032e2:	bf08      	it	eq
 80032e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bfc4      	itt	gt
 80032ec:	1a9b      	subgt	r3, r3, r2
 80032ee:	18ed      	addgt	r5, r5, r3
 80032f0:	341a      	adds	r4, #26
 80032f2:	42b5      	cmp	r5, r6
 80032f4:	d11a      	bne.n	800332c <_printf_common+0xcc>
 80032f6:	2000      	movs	r0, #0
 80032f8:	e008      	b.n	800330c <_printf_common+0xac>
 80032fa:	2301      	movs	r3, #1
 80032fc:	4652      	mov	r2, sl
 80032fe:	4649      	mov	r1, r9
 8003300:	4638      	mov	r0, r7
 8003302:	47c0      	blx	r8
 8003304:	3001      	adds	r0, #1
 8003306:	d103      	bne.n	8003310 <_printf_common+0xb0>
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003310:	3501      	adds	r5, #1
 8003312:	e7c4      	b.n	800329e <_printf_common+0x3e>
 8003314:	2030      	movs	r0, #48	; 0x30
 8003316:	18e1      	adds	r1, r4, r3
 8003318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003322:	4422      	add	r2, r4
 8003324:	3302      	adds	r3, #2
 8003326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800332a:	e7c5      	b.n	80032b8 <_printf_common+0x58>
 800332c:	2301      	movs	r3, #1
 800332e:	4622      	mov	r2, r4
 8003330:	4649      	mov	r1, r9
 8003332:	4638      	mov	r0, r7
 8003334:	47c0      	blx	r8
 8003336:	3001      	adds	r0, #1
 8003338:	d0e6      	beq.n	8003308 <_printf_common+0xa8>
 800333a:	3601      	adds	r6, #1
 800333c:	e7d9      	b.n	80032f2 <_printf_common+0x92>
	...

08003340 <_printf_i>:
 8003340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	460c      	mov	r4, r1
 8003346:	7e27      	ldrb	r7, [r4, #24]
 8003348:	4691      	mov	r9, r2
 800334a:	2f78      	cmp	r7, #120	; 0x78
 800334c:	4680      	mov	r8, r0
 800334e:	469a      	mov	sl, r3
 8003350:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003356:	d807      	bhi.n	8003368 <_printf_i+0x28>
 8003358:	2f62      	cmp	r7, #98	; 0x62
 800335a:	d80a      	bhi.n	8003372 <_printf_i+0x32>
 800335c:	2f00      	cmp	r7, #0
 800335e:	f000 80d9 	beq.w	8003514 <_printf_i+0x1d4>
 8003362:	2f58      	cmp	r7, #88	; 0x58
 8003364:	f000 80a4 	beq.w	80034b0 <_printf_i+0x170>
 8003368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800336c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003370:	e03a      	b.n	80033e8 <_printf_i+0xa8>
 8003372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003376:	2b15      	cmp	r3, #21
 8003378:	d8f6      	bhi.n	8003368 <_printf_i+0x28>
 800337a:	a001      	add	r0, pc, #4	; (adr r0, 8003380 <_printf_i+0x40>)
 800337c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003380:	080033d9 	.word	0x080033d9
 8003384:	080033ed 	.word	0x080033ed
 8003388:	08003369 	.word	0x08003369
 800338c:	08003369 	.word	0x08003369
 8003390:	08003369 	.word	0x08003369
 8003394:	08003369 	.word	0x08003369
 8003398:	080033ed 	.word	0x080033ed
 800339c:	08003369 	.word	0x08003369
 80033a0:	08003369 	.word	0x08003369
 80033a4:	08003369 	.word	0x08003369
 80033a8:	08003369 	.word	0x08003369
 80033ac:	080034fb 	.word	0x080034fb
 80033b0:	0800341d 	.word	0x0800341d
 80033b4:	080034dd 	.word	0x080034dd
 80033b8:	08003369 	.word	0x08003369
 80033bc:	08003369 	.word	0x08003369
 80033c0:	0800351d 	.word	0x0800351d
 80033c4:	08003369 	.word	0x08003369
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	08003369 	.word	0x08003369
 80033d0:	08003369 	.word	0x08003369
 80033d4:	080034e5 	.word	0x080034e5
 80033d8:	680b      	ldr	r3, [r1, #0]
 80033da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033de:	1d1a      	adds	r2, r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	600a      	str	r2, [r1, #0]
 80033e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0a4      	b.n	8003536 <_printf_i+0x1f6>
 80033ec:	6825      	ldr	r5, [r4, #0]
 80033ee:	6808      	ldr	r0, [r1, #0]
 80033f0:	062e      	lsls	r6, r5, #24
 80033f2:	f100 0304 	add.w	r3, r0, #4
 80033f6:	d50a      	bpl.n	800340e <_printf_i+0xce>
 80033f8:	6805      	ldr	r5, [r0, #0]
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	da03      	bge.n	8003408 <_printf_i+0xc8>
 8003400:	232d      	movs	r3, #45	; 0x2d
 8003402:	426d      	negs	r5, r5
 8003404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003408:	230a      	movs	r3, #10
 800340a:	485e      	ldr	r0, [pc, #376]	; (8003584 <_printf_i+0x244>)
 800340c:	e019      	b.n	8003442 <_printf_i+0x102>
 800340e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003412:	6805      	ldr	r5, [r0, #0]
 8003414:	600b      	str	r3, [r1, #0]
 8003416:	bf18      	it	ne
 8003418:	b22d      	sxthne	r5, r5
 800341a:	e7ef      	b.n	80033fc <_printf_i+0xbc>
 800341c:	680b      	ldr	r3, [r1, #0]
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	1d18      	adds	r0, r3, #4
 8003422:	6008      	str	r0, [r1, #0]
 8003424:	0628      	lsls	r0, r5, #24
 8003426:	d501      	bpl.n	800342c <_printf_i+0xec>
 8003428:	681d      	ldr	r5, [r3, #0]
 800342a:	e002      	b.n	8003432 <_printf_i+0xf2>
 800342c:	0669      	lsls	r1, r5, #25
 800342e:	d5fb      	bpl.n	8003428 <_printf_i+0xe8>
 8003430:	881d      	ldrh	r5, [r3, #0]
 8003432:	2f6f      	cmp	r7, #111	; 0x6f
 8003434:	bf0c      	ite	eq
 8003436:	2308      	moveq	r3, #8
 8003438:	230a      	movne	r3, #10
 800343a:	4852      	ldr	r0, [pc, #328]	; (8003584 <_printf_i+0x244>)
 800343c:	2100      	movs	r1, #0
 800343e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003442:	6866      	ldr	r6, [r4, #4]
 8003444:	2e00      	cmp	r6, #0
 8003446:	bfa8      	it	ge
 8003448:	6821      	ldrge	r1, [r4, #0]
 800344a:	60a6      	str	r6, [r4, #8]
 800344c:	bfa4      	itt	ge
 800344e:	f021 0104 	bicge.w	r1, r1, #4
 8003452:	6021      	strge	r1, [r4, #0]
 8003454:	b90d      	cbnz	r5, 800345a <_printf_i+0x11a>
 8003456:	2e00      	cmp	r6, #0
 8003458:	d04d      	beq.n	80034f6 <_printf_i+0x1b6>
 800345a:	4616      	mov	r6, r2
 800345c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003460:	fb03 5711 	mls	r7, r3, r1, r5
 8003464:	5dc7      	ldrb	r7, [r0, r7]
 8003466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800346a:	462f      	mov	r7, r5
 800346c:	42bb      	cmp	r3, r7
 800346e:	460d      	mov	r5, r1
 8003470:	d9f4      	bls.n	800345c <_printf_i+0x11c>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d10b      	bne.n	800348e <_printf_i+0x14e>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	07df      	lsls	r7, r3, #31
 800347a:	d508      	bpl.n	800348e <_printf_i+0x14e>
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	6861      	ldr	r1, [r4, #4]
 8003480:	4299      	cmp	r1, r3
 8003482:	bfde      	ittt	le
 8003484:	2330      	movle	r3, #48	; 0x30
 8003486:	f806 3c01 	strble.w	r3, [r6, #-1]
 800348a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800348e:	1b92      	subs	r2, r2, r6
 8003490:	6122      	str	r2, [r4, #16]
 8003492:	464b      	mov	r3, r9
 8003494:	4621      	mov	r1, r4
 8003496:	4640      	mov	r0, r8
 8003498:	f8cd a000 	str.w	sl, [sp]
 800349c:	aa03      	add	r2, sp, #12
 800349e:	f7ff fedf 	bl	8003260 <_printf_common>
 80034a2:	3001      	adds	r0, #1
 80034a4:	d14c      	bne.n	8003540 <_printf_i+0x200>
 80034a6:	f04f 30ff 	mov.w	r0, #4294967295
 80034aa:	b004      	add	sp, #16
 80034ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b0:	4834      	ldr	r0, [pc, #208]	; (8003584 <_printf_i+0x244>)
 80034b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034b6:	680e      	ldr	r6, [r1, #0]
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80034be:	061f      	lsls	r7, r3, #24
 80034c0:	600e      	str	r6, [r1, #0]
 80034c2:	d514      	bpl.n	80034ee <_printf_i+0x1ae>
 80034c4:	07d9      	lsls	r1, r3, #31
 80034c6:	bf44      	itt	mi
 80034c8:	f043 0320 	orrmi.w	r3, r3, #32
 80034cc:	6023      	strmi	r3, [r4, #0]
 80034ce:	b91d      	cbnz	r5, 80034d8 <_printf_i+0x198>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	2310      	movs	r3, #16
 80034da:	e7af      	b.n	800343c <_printf_i+0xfc>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	f043 0320 	orr.w	r3, r3, #32
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	2378      	movs	r3, #120	; 0x78
 80034e6:	4828      	ldr	r0, [pc, #160]	; (8003588 <_printf_i+0x248>)
 80034e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ec:	e7e3      	b.n	80034b6 <_printf_i+0x176>
 80034ee:	065e      	lsls	r6, r3, #25
 80034f0:	bf48      	it	mi
 80034f2:	b2ad      	uxthmi	r5, r5
 80034f4:	e7e6      	b.n	80034c4 <_printf_i+0x184>
 80034f6:	4616      	mov	r6, r2
 80034f8:	e7bb      	b.n	8003472 <_printf_i+0x132>
 80034fa:	680b      	ldr	r3, [r1, #0]
 80034fc:	6826      	ldr	r6, [r4, #0]
 80034fe:	1d1d      	adds	r5, r3, #4
 8003500:	6960      	ldr	r0, [r4, #20]
 8003502:	600d      	str	r5, [r1, #0]
 8003504:	0635      	lsls	r5, r6, #24
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	d501      	bpl.n	800350e <_printf_i+0x1ce>
 800350a:	6018      	str	r0, [r3, #0]
 800350c:	e002      	b.n	8003514 <_printf_i+0x1d4>
 800350e:	0671      	lsls	r1, r6, #25
 8003510:	d5fb      	bpl.n	800350a <_printf_i+0x1ca>
 8003512:	8018      	strh	r0, [r3, #0]
 8003514:	2300      	movs	r3, #0
 8003516:	4616      	mov	r6, r2
 8003518:	6123      	str	r3, [r4, #16]
 800351a:	e7ba      	b.n	8003492 <_printf_i+0x152>
 800351c:	680b      	ldr	r3, [r1, #0]
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	600a      	str	r2, [r1, #0]
 8003522:	681e      	ldr	r6, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4630      	mov	r0, r6
 8003528:	6862      	ldr	r2, [r4, #4]
 800352a:	f000 f831 	bl	8003590 <memchr>
 800352e:	b108      	cbz	r0, 8003534 <_printf_i+0x1f4>
 8003530:	1b80      	subs	r0, r0, r6
 8003532:	6060      	str	r0, [r4, #4]
 8003534:	6863      	ldr	r3, [r4, #4]
 8003536:	6123      	str	r3, [r4, #16]
 8003538:	2300      	movs	r3, #0
 800353a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353e:	e7a8      	b.n	8003492 <_printf_i+0x152>
 8003540:	4632      	mov	r2, r6
 8003542:	4649      	mov	r1, r9
 8003544:	4640      	mov	r0, r8
 8003546:	6923      	ldr	r3, [r4, #16]
 8003548:	47d0      	blx	sl
 800354a:	3001      	adds	r0, #1
 800354c:	d0ab      	beq.n	80034a6 <_printf_i+0x166>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	079b      	lsls	r3, r3, #30
 8003552:	d413      	bmi.n	800357c <_printf_i+0x23c>
 8003554:	68e0      	ldr	r0, [r4, #12]
 8003556:	9b03      	ldr	r3, [sp, #12]
 8003558:	4298      	cmp	r0, r3
 800355a:	bfb8      	it	lt
 800355c:	4618      	movlt	r0, r3
 800355e:	e7a4      	b.n	80034aa <_printf_i+0x16a>
 8003560:	2301      	movs	r3, #1
 8003562:	4632      	mov	r2, r6
 8003564:	4649      	mov	r1, r9
 8003566:	4640      	mov	r0, r8
 8003568:	47d0      	blx	sl
 800356a:	3001      	adds	r0, #1
 800356c:	d09b      	beq.n	80034a6 <_printf_i+0x166>
 800356e:	3501      	adds	r5, #1
 8003570:	68e3      	ldr	r3, [r4, #12]
 8003572:	9903      	ldr	r1, [sp, #12]
 8003574:	1a5b      	subs	r3, r3, r1
 8003576:	42ab      	cmp	r3, r5
 8003578:	dcf2      	bgt.n	8003560 <_printf_i+0x220>
 800357a:	e7eb      	b.n	8003554 <_printf_i+0x214>
 800357c:	2500      	movs	r5, #0
 800357e:	f104 0619 	add.w	r6, r4, #25
 8003582:	e7f5      	b.n	8003570 <_printf_i+0x230>
 8003584:	080036d7 	.word	0x080036d7
 8003588:	080036e8 	.word	0x080036e8

0800358c <__retarget_lock_acquire_recursive>:
 800358c:	4770      	bx	lr

0800358e <__retarget_lock_release_recursive>:
 800358e:	4770      	bx	lr

08003590 <memchr>:
 8003590:	4603      	mov	r3, r0
 8003592:	b510      	push	{r4, lr}
 8003594:	b2c9      	uxtb	r1, r1
 8003596:	4402      	add	r2, r0
 8003598:	4293      	cmp	r3, r2
 800359a:	4618      	mov	r0, r3
 800359c:	d101      	bne.n	80035a2 <memchr+0x12>
 800359e:	2000      	movs	r0, #0
 80035a0:	e003      	b.n	80035aa <memchr+0x1a>
 80035a2:	7804      	ldrb	r4, [r0, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	428c      	cmp	r4, r1
 80035a8:	d1f6      	bne.n	8003598 <memchr+0x8>
 80035aa:	bd10      	pop	{r4, pc}

080035ac <memcpy>:
 80035ac:	440a      	add	r2, r1
 80035ae:	4291      	cmp	r1, r2
 80035b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80035b4:	d100      	bne.n	80035b8 <memcpy+0xc>
 80035b6:	4770      	bx	lr
 80035b8:	b510      	push	{r4, lr}
 80035ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035be:	4291      	cmp	r1, r2
 80035c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035c4:	d1f9      	bne.n	80035ba <memcpy+0xe>
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <memmove>:
 80035c8:	4288      	cmp	r0, r1
 80035ca:	b510      	push	{r4, lr}
 80035cc:	eb01 0402 	add.w	r4, r1, r2
 80035d0:	d902      	bls.n	80035d8 <memmove+0x10>
 80035d2:	4284      	cmp	r4, r0
 80035d4:	4623      	mov	r3, r4
 80035d6:	d807      	bhi.n	80035e8 <memmove+0x20>
 80035d8:	1e43      	subs	r3, r0, #1
 80035da:	42a1      	cmp	r1, r4
 80035dc:	d008      	beq.n	80035f0 <memmove+0x28>
 80035de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035e6:	e7f8      	b.n	80035da <memmove+0x12>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4402      	add	r2, r0
 80035ec:	428a      	cmp	r2, r1
 80035ee:	d100      	bne.n	80035f2 <memmove+0x2a>
 80035f0:	bd10      	pop	{r4, pc}
 80035f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035fa:	e7f7      	b.n	80035ec <memmove+0x24>

080035fc <_realloc_r>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	4607      	mov	r7, r0
 8003600:	4614      	mov	r4, r2
 8003602:	460e      	mov	r6, r1
 8003604:	b921      	cbnz	r1, 8003610 <_realloc_r+0x14>
 8003606:	4611      	mov	r1, r2
 8003608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800360c:	f7ff bc36 	b.w	8002e7c <_malloc_r>
 8003610:	b922      	cbnz	r2, 800361c <_realloc_r+0x20>
 8003612:	f7ff fbe7 	bl	8002de4 <_free_r>
 8003616:	4625      	mov	r5, r4
 8003618:	4628      	mov	r0, r5
 800361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361c:	f000 f814 	bl	8003648 <_malloc_usable_size_r>
 8003620:	42a0      	cmp	r0, r4
 8003622:	d20f      	bcs.n	8003644 <_realloc_r+0x48>
 8003624:	4621      	mov	r1, r4
 8003626:	4638      	mov	r0, r7
 8003628:	f7ff fc28 	bl	8002e7c <_malloc_r>
 800362c:	4605      	mov	r5, r0
 800362e:	2800      	cmp	r0, #0
 8003630:	d0f2      	beq.n	8003618 <_realloc_r+0x1c>
 8003632:	4631      	mov	r1, r6
 8003634:	4622      	mov	r2, r4
 8003636:	f7ff ffb9 	bl	80035ac <memcpy>
 800363a:	4631      	mov	r1, r6
 800363c:	4638      	mov	r0, r7
 800363e:	f7ff fbd1 	bl	8002de4 <_free_r>
 8003642:	e7e9      	b.n	8003618 <_realloc_r+0x1c>
 8003644:	4635      	mov	r5, r6
 8003646:	e7e7      	b.n	8003618 <_realloc_r+0x1c>

08003648 <_malloc_usable_size_r>:
 8003648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364c:	1f18      	subs	r0, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	bfbc      	itt	lt
 8003652:	580b      	ldrlt	r3, [r1, r0]
 8003654:	18c0      	addlt	r0, r0, r3
 8003656:	4770      	bx	lr

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
